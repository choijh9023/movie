import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import axios from "axios";
import "../styles/CreateReview.css";

const CreateReview = ({ movie }) => {
  const [reviewText, setReviewText] = useState("");
  const [rating, setRating] = useState(0);
  const [showAiResult, setShowAiResult] = useState(false);
  const [aiAnalysisResult, setAiAnalysisResult] = useState(null);
  const [isDevMode, setIsDevMode] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  const categories = [
    { name: "Ïó∞Ï∂ú", value: "DIRECTING" },
    { name: "Ïó∞Í∏∞", value: "ACTING" },
    { name: "ÏùåÏïÖ", value: "OST" },
    { name: "Ïä§ÌÜ†Î¶¨", value: "STORY" },
    { name: "Î∂ÑÏúÑÍ∏∞", value: "MOOD" },
    { name: "Í∏∞ÌÉÄ", value: "OTHER" },
  ];

  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    setIsDevMode(searchParams.get("dev") === "true");
  }, [location]);

  const handleTextChange = (event) => {
    setReviewText(event.target.value);
  };

  const handleSubmit = async () => {
    if (!reviewText.trim()) {
      alert("Î¶¨Î∑∞Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }
    if (rating === 0) {
      alert("ÌèâÏ†êÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    const reviewData = {
      m_cd: movie.m_cd,
      r_text: reviewText,
      r_score: rating,
    };

    try {
      if (!isDevMode) {
        axios.post("http://localhost:8080/reviews/add", reviewData, {
          headers: {
            "Content-Type": "application/json",
          },
        });
        alert("‚úÖ Î¶¨Î∑∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!");
        navigate("/home");
        return;
      }

      setIsAnalyzing(true);
      setShowAiResult(true);

      const response = await axios.post(
        "http://localhost:8080/reviews/add",
        reviewData,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      console.log("Ï†ÑÏ≤¥ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", response.data);

      if (response.data.aiResult) {
        const { aiResult } = response.data;
        console.log("AI Î∂ÑÏÑù Í≤∞Í≥º:", aiResult);

        setAiAnalysisResult({
          atType: aiResult.predicted_category,
          aeType: aiResult.predicted_sentiment,
          atScore: aiResult.category_confidence,
          aeScore: aiResult.sentiment_confidence,
        });
      } else {
        console.error("AI Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.");
        alert("AI Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î∞õÏïÑÏò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
      }
    } catch (error) {
      console.error("üö® Î¶¨Î∑∞ Îì±Î°ù Ïã§Ìå®:", error);
      console.error("ÏóêÎü¨ ÏÉÅÏÑ∏:", error.response?.data);
      alert("üö® Î¶¨Î∑∞ Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleConfirm = () => {
    navigate("/home");
  };

  const goBack = () => {
    navigate(-1);
  };

  if (!movie) {
    return null;
  }

  return (
    <div className="review-textarea-container">
      <textarea
        placeholder="Î¶¨Î∑∞Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
        value={reviewText}
        onChange={handleTextChange}
      />

      <div className="review-actions">
        <div className="rating-container">
          <span className="rating-label">‚òÖ</span>
          <div className="rating-buttons">
            {[1, 2, 3, 4, 5].map((num) => (
              <button
                key={num}
                className={rating === num ? "active" : ""}
                onClick={() => setRating(num)}
              >
                {num}
              </button>
            ))}
          </div>
        </div>

        <div className="review-submit-actions">
          {!showAiResult ? (
            <>
              <button className="submit-button" onClick={handleSubmit}>
                Îì±Î°ù
              </button>
              <button className="back-button" onClick={goBack}>
                Ïù¥Ï†Ñ
              </button>
            </>
          ) : (
            <div className="ai-analysis-result">
              <h3>AI Î∂ÑÎ•òÍ≤∞Í≥º</h3>
              {isAnalyzing ? (
                <div className="analyzing-container">
                  <div className="loading-spinner"></div>
                  <p>AIÍ∞Ä Î¶¨Î∑∞Î•º Î∂ÑÏÑùÏ§ëÏûÖÎãàÎã§...</p>
                </div>
              ) : (
                <>
                  <div>
                    Ï£ºÏ†ú:{" "}
                    {
                      categories.find(
                        (c) => c.value === aiAnalysisResult?.atType
                      )?.name
                    }
                  </div>
                  <div>
                    Í∞êÏ†ï:{" "}
                    {aiAnalysisResult?.aeType === "POSITIVE" ? "Í∏çÏ†ï" : "Î∂ÄÏ†ï"}
                  </div>
                  <div>Ï£ºÏ†ú Ï†êÏàò: {aiAnalysisResult?.atScore?.toFixed(2)}</div>
                  <div>Í∞êÏ†ï Ï†êÏàò: {aiAnalysisResult?.aeScore?.toFixed(2)}</div>
                  <button className="confirm-button" onClick={handleConfirm}>
                    ÌôïÏù∏
                  </button>
                </>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CreateReview;
